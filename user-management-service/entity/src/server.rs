//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Server")]
pub struct Model {
    #[sea_orm(column_name = "serverId", primary_key, auto_increment = false)]
    pub server_id: i64,
    #[sea_orm(column_name = "Name")]
    pub name: String,
    pub owner_id: i64,
    pub icon_url: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::channel::Entity")]
    Channel,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::OwnerId",
        to = "super::user::Column::UserId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
    #[sea_orm(has_many = "super::users_servers::Entity")]
    UsersServers,
}

impl Related<super::channel::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Channel.def()
    }
}

impl Related<super::users_servers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersServers.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::users_servers::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::users_servers::Relation::Server.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
