//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Channel")]
pub struct Model {
    #[sea_orm(column_name = "channelId", primary_key, auto_increment = false)]
    pub channel_id: i64,
    #[sea_orm(column_name = "Name")]
    pub name: String,
    #[sea_orm(column_name = "serverId")]
    pub server_id: i64,
    pub r#type: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::server::Entity",
        from = "Column::ServerId",
        to = "super::server::Column::ServerId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Server,
    #[sea_orm(has_many = "super::users_channels::Entity")]
    UsersChannels,
}

impl Related<super::server::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Server.def()
    }
}

impl Related<super::users_channels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersChannels.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::users_channels::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::users_channels::Relation::Channel.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
