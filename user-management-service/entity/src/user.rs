//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(column_name = "userId", primary_key)]
    pub user_id: i64,
    pub name: String,
    pub tag_name: String,
    pub tag_number: i32,
    pub photo_url: String,
    #[sea_orm(unique)]
    pub username: String,
    #[sea_orm(unique)]
    pub email: String,
    pub phone_number: String,
    pub password: String,
    pub created_at: Date,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation,Serialize,Deserialize)]
pub enum Relation {
    #[sea_orm(has_many = "super::server::Entity")]
    Server,
    #[sea_orm(has_many = "super::users_channels::Entity")]
    UsersChannels,
    #[sea_orm(has_many = "super::users_servers::Entity")]
    UsersServers,
}

impl Related<super::users_channels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersChannels.def()
    }
}

impl Related<super::users_servers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsersServers.def()
    }
}

impl Related<super::channel::Entity> for Entity {
    fn to() -> RelationDef {
        super::users_channels::Relation::Channel.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::users_channels::Relation::User.def().rev())
    }
}

impl Related<super::server::Entity> for Entity {
    fn to() -> RelationDef {
        super::users_servers::Relation::Server.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::users_servers::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
